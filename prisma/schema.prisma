// This is your Prisma schema file for Blink
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core User model
model User {
  id        String   @id @default(cuid())
  fid       Int      @unique // Farcaster ID
  username  String   @unique
  displayName String
  bio       String?
  pfpUrl    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Farcaster data
  followerCount  Int     @default(0)
  followingCount Int     @default(0)
  isVerified     Boolean @default(false)
  lastSyncAt     DateTime?

  // Bets and markets
  bets           Bet[]
  markets        Market[]
  
  // Social features
  followers      Follow[] @relation("UserFollowers")
  following      Follow[] @relation("UserFollowing")
  groupMemberships GroupMember[]
  chatMessages   ChatMessage[]
  socialBets     SocialBet[]
  
  // Analytics
  userStats      UserStats?
  badges         UserBadge[]
  notifications  Notification[]

  @@map("users")
}

// Market model
model Market {
  id             String        @id @default(cuid())
  onchainId      Int?          @unique // Smart contract market ID
  type           PredictionType
  title          String
  description    String?
  targetId       String        // Cast hash, FID, channel ID, etc.
  threshold      Int
  duration       Int           // Hours
  deadline       DateTime
  
  // Financial data
  creatorStake   Decimal       @default(0) @db.Decimal(18, 6)
  yesPool        Decimal       @default(0) @db.Decimal(18, 6)
  noPool         Decimal       @default(0) @db.Decimal(18, 6)
  totalVolume    Decimal       @default(0) @db.Decimal(18, 6)
  
  // Status and outcome
  status         MarketStatus  @default(ACTIVE)
  outcome        Boolean?      // Final outcome when settled
  settledAt      DateTime?
  
  // Relations
  creator        User          @relation(fields: [creatorId], references: [id])
  creatorId      String
  bets           Bet[]
  chatMessages   ChatMessage[]
  
  // Metadata
  tags           String[]
  category       String?
  isPublic       Boolean       @default(true)
  
  // Timestamps
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("markets")
}

// Betting model
model Bet {
  id         String    @id @default(cuid())
  onchainId  Int?      @unique // Smart contract bet ID
  
  // Bet details
  amount     Decimal   @db.Decimal(18, 6)
  outcome    Boolean   // true = YES, false = NO
  odds       Decimal   @db.Decimal(8, 4) // Odds at time of bet
  
  // Status
  status     BetStatus @default(ACTIVE)
  payout     Decimal?  @db.Decimal(18, 6)
  claimedAt  DateTime?
  
  // Relations
  market     Market    @relation(fields: [marketId], references: [id])
  marketId   String
  bettor     User      @relation(fields: [bettorId], references: [id])
  bettorId   String
  
  // Social features
  isPublic   Boolean   @default(true)
  note       String?   @db.VarChar(500)
  socialBets SocialBet[]
  
  // Timestamps
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("bets")
}

// Social betting activities
model SocialBet {
  id         String   @id @default(cuid())
  
  // Relations
  bet        Bet      @relation(fields: [betId], references: [id])
  betId      String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  
  // Social data
  isPublic   Boolean  @default(true)
  note       String?  @db.VarChar(500)
  copiedBy   String[] // User IDs who copied this bet
  group      BettingGroup? @relation(fields: [groupId], references: [id])
  groupId    String?
  
  createdAt  DateTime @default(now())

  @@map("social_bets")
}

// User statistics
model UserStats {
  id             String  @id @default(cuid())
  user           User    @relation(fields: [userId], references: [id])
  userId         String  @unique
  
  // Betting stats
  totalBets      Int     @default(0)
  totalVolume    Decimal @default(0) @db.Decimal(18, 6)
  totalWinnings  Decimal @default(0) @db.Decimal(18, 6)
  winRate        Decimal @default(0) @db.Decimal(5, 4)
  currentStreak  Int     @default(0)
  maxStreak      Int     @default(0)
  
  // Social stats
  reputation     Int     @default(50) // 0-100
  influence      Int     @default(0)  // 0-100
  followersCount Int     @default(0)
  followingCount Int     @default(0)
  
  // Creator stats
  marketsCreated Int     @default(0)
  creatorRewards Decimal @default(0) @db.Decimal(18, 6)
  
  // Performance by type
  accuracyData   Json?   // Store prediction accuracy by type
  
  updatedAt      DateTime @updatedAt

  @@map("user_stats")
}

// Follow relationships
model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@map("follows")
}

// Betting groups
model BettingGroup {
  id          String        @id @default(cuid())
  name        String        @db.VarChar(100)
  description String        @db.VarChar(500)
  avatar      String?
  
  // Settings
  isPublic    Boolean       @default(true)
  inviteCode  String?       @unique @db.VarChar(20)
  minStake    Decimal?      @db.Decimal(18, 6)
  rules       String?       @db.Text
  tags        String[]
  
  // Stats
  totalMembers Int          @default(0)
  totalVolume  Decimal      @default(0) @db.Decimal(18, 6)
  
  // Relations
  creator      User         @relation(fields: [creatorId], references: [id])
  creatorId    String
  members      GroupMember[]
  socialBets   SocialBet[]
  
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("betting_groups")
}

// Group membership
model GroupMember {
  id         String      @id @default(cuid())
  
  // Relations
  group      BettingGroup @relation(fields: [groupId], references: [id])
  groupId    String
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  
  // Member data
  role       GroupRole   @default(MEMBER)
  totalBets  Int         @default(0)
  totalWinnings Decimal  @default(0) @db.Decimal(18, 6)
  reputation Int         @default(50)
  isActive   Boolean     @default(true)
  
  joinedAt   DateTime    @default(now())

  @@unique([groupId, userId])
  @@map("group_members")
}

// Chat messages
model ChatMessage {
  id        String      @id @default(cuid())
  
  // Content
  message   String      @db.VarChar(1000)
  type      MessageType @default(MESSAGE)
  
  // Relations
  market    Market?     @relation(fields: [marketId], references: [id])
  marketId  String?
  author    User        @relation(fields: [authorId], references: [id])
  authorId  String
  
  // Metadata
  reactions Json?       // Store reactions as JSON
  replyTo   String?     // Message ID for replies
  isDeleted Boolean     @default(false)
  
  createdAt DateTime    @default(now())

  @@map("chat_messages")
}

// Competitions
model Competition {
  id            String           @id @default(cuid())
  name          String           @db.VarChar(200)
  description   String           @db.Text
  
  // Timing
  startDate     DateTime
  endDate       DateTime
  
  // Entry
  entryFee      Decimal?         @db.Decimal(18, 6)
  maxParticipants Int?
  
  // Prizes
  prizePool     Decimal          @default(0) @db.Decimal(18, 6)
  prizes        Json             // Prize structure as JSON
  
  // Settings
  rules         String           @db.Text
  category      String
  status        CompetitionStatus @default(UPCOMING)
  
  // Relations
  participants  CompetitionParticipant[]
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@map("competitions")
}

// Competition participants
model CompetitionParticipant {
  id            String      @id @default(cuid())
  
  // Relations
  competition   Competition @relation(fields: [competitionId], references: [id])
  competitionId String
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  
  // Performance
  currentScore  Decimal     @default(0) @db.Decimal(18, 6)
  currentRank   Int         @default(0)
  totalBets     Int         @default(0)
  winRate       Decimal     @default(0) @db.Decimal(5, 4)
  
  joinedAt      DateTime    @default(now())

  @@unique([competitionId, userId])
  @@map("competition_participants")
}

// User badges
model Badge {
  id          String     @id @default(cuid())
  name        String     @unique @db.VarChar(100)
  description String     @db.VarChar(500)
  icon        String     @db.VarChar(10)
  rarity      BadgeRarity
  category    BadgeCategory
  
  // Conditions for earning (stored as JSON)
  conditions  Json
  
  users       UserBadge[]
  
  createdAt   DateTime   @default(now())

  @@map("badges")
}

// User badge relationships
model UserBadge {
  id       String   @id @default(cuid())
  
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  badge    Badge    @relation(fields: [badgeId], references: [id])
  badgeId  String
  
  earnedAt DateTime @default(now())

  @@unique([userId, badgeId])
  @@map("user_badges")
}

// Notifications
model Notification {
  id        String           @id @default(cuid())
  
  // Content
  title     String           @db.VarChar(200)
  message   String           @db.VarChar(1000)
  type      NotificationType
  data      Json?            // Additional data as JSON
  
  // Relations
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  
  // Status
  isRead    Boolean          @default(false)
  readAt    DateTime?
  
  createdAt DateTime         @default(now())

  @@map("notifications")
}

// Real-time metrics cache
model MetricsCache {
  id            String   @id @default(cuid())
  targetId      String   @unique // Cast hash, FID, channel ID
  targetType    PredictionType
  
  // Current metrics
  currentValue  Int
  startValue    Int
  targetValue   Int
  changeRate    Decimal  @db.Decimal(10, 6)
  likelihood    Decimal  @db.Decimal(5, 4)
  
  // Metadata
  lastUpdated   DateTime @default(now())
  isStale       Boolean  @default(false)
  
  @@map("metrics_cache")
}

// Enums
enum PredictionType {
  VIRAL_CAST
  POLL_OUTCOME
  CHANNEL_GROWTH
  CREATOR_MILESTONE
  FOLLOWER_GROWTH
  LIVE_STREAM_VIEWS
  ENGAGEMENT_BATTLE
  TRENDING_CAST
  FRAME_INTERACTIONS
}

enum MarketStatus {
  ACTIVE
  SETTLED
  CANCELLED
  EXPIRED
}

enum BetStatus {
  ACTIVE
  WON
  LOST
  REFUNDED
}

enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum MessageType {
  MESSAGE
  BET_PLACED
  PREDICTION
  SYSTEM
}

enum CompetitionStatus {
  UPCOMING
  ACTIVE
  ENDED
}

enum BadgeRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

enum BadgeCategory {
  ACHIEVEMENT
  MILESTONE
  STREAK
  SPECIAL
}

enum NotificationType {
  BET_WON
  BET_LOST
  MARKET_SETTLED
  NEW_FOLLOWER
  BET_COPIED
  GROUP_INVITE
  COMPETITION_STARTED
  BADGE_EARNED
}